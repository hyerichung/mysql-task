
/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const { port } = require("../src/config");

app.set("port", port);

/**
  * Create HTTP server.
  */

let server = http.createServer(app);

/**
  * Listen on provided port, on all network interfaces.
  */

server.listen(port, () => console.log(`server is listening ${port}`));
server.on("error", onError);
server.on("listening", onListening);

/**
  * Event listener for HTTP server "error" event.
  */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      throw new Error(bind + " requires elevated privileges");
    case "EADDRINUSE":
      throw new Error(bind + " is already in use");
    default:
      throw error;
  }
}

/**
  * Event listener for HTTP server "listening" event.
  */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
